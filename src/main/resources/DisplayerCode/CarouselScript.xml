<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>DisplayerCode</web>
<name>CarouselScript</name>
<language></language>
<defaultLanguage>fr</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1398855257000</creationDate>
<date>1398855257000</date>
<contentUpdateDate>1398855257000</contentUpdateDate>
<version>1.1</version>
<title></title>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment>Import√© depuis un le XAR</comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.1</syntaxId>
<hidden>false</hidden>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>DisplayerCode.CarouselScript</name>
<number>0</number>
<className>XWiki.JavaScriptExtension</className>
<guid>e7e7fee2-e8ae-4a78-9267-8dbbcc36ccf7</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>var XWiki = (function(XWiki) {
var widgets = XWiki.widgets = XWiki.widgets || {};
widgets.Carousel = Class.create({
  defaultOptions : {
    // How long does the sliding animation take
    duration : 0.5,
    // How long to display a slide before automatically switching to the next one
    frequency : 5
  },

  initialize : function(container, options) {
    this.scrolling  = false;
    this.container  = $(container);
    this.scroller   = this.container.down('.scroller');
    this.sections   = this.container.select('.section');
    this.controls   = this.container.select('.controls a');
    var l=this.controls.length;
    this.nextButton=this.controls.findAll(function(item){return item.hasClassName('nextImage');})[0];
    this.previousButton=this.controls.findAll(function(item){return item.hasClassName('previousImage');})[0];
    this.options    = Object.extend(Object.clone(this.defaultOptions), options || {});

    this.sections.each(function(section, index) {
      section._index = index;
      section._control = this.container.down('.controls a.item[href="#' + section.id + '"]');
    }.bind(this));

    this.addObservers();
    if (this.options.initialSection) {
      // initialSection should be the id of the section you want to show up on load
      this.moveTo(this.options.initialSection);
    }
    if(this.options.autoGlide || this.container.hasClassName('autostart')) {
      this.start();
    }
  },

  addObservers: function() {
    this.controls.invoke('observe', 'click', this.click.bindAsEventListener(this));
  },

  click: function(event) {
    event.stop();
    this.stop();
    var element = event.findElement('a');
    if (this.scrolling) {
      this.scrolling.cancel();
    }

    this.moveTo(this.container.down('#'+element.href.split("#")[1]));
    this.timer=this.periodicallyUpdate.bind(this).delay(this.options.frequency)
  },

  moveTo: function(element) {
    this.current = $(element);

    var number = this.current._index;
    var next=(this.sections.length-1==number)?0:number+1;
    var previous=(number==0)?this.sections.length-1:number-1;
    this.nextButton.href="#section"+next;
    this.previousButton.href="#section"+previous;

    Position.prepare();
    var containerOffset = Position.cumulativeOffset(this.scroller),
    elementOffset = Position.cumulativeOffset($(element));

    this.scrolling = new Effect.SmoothScroll(this.scroller, {duration:this.options.duration, x:(elementOffset[0]-containerOffset[0]), y:(elementOffset[1]-containerOffset[1]), afterFinish: this.onAnimationEnded.bind(this)});
  },

  next: function() {
    if (this.current) {
      var currentIndex = this.current._index;
      var nextIndex = (this.sections.length - 1 == currentIndex) ? 0 : currentIndex + 1;
    } else {
      var nextIndex = 1;
    }

    this.moveTo(this.sections[nextIndex]);
  },

  previous: function() {
    if (this.current) {
      var currentIndex = this.current._index;
      var prevIndex = (currentIndex == 0) ? this.sections.length - 1 : currentIndex - 1;
    } else {
      var prevIndex = this.sections.length - 1;
    }

    this.moveTo(this.sections[prevIndex]);
  },

  stop: function() {
    clearTimeout(this.timer);
  },

  start: function() {
    this.periodicallyUpdate();
  },

  periodicallyUpdate: function() {
    if (this.timer != null) {
      clearTimeout(this.timer);
      this.next();
    }
    this.timer = this.periodicallyUpdate.bind(this).delay(this.options.frequency);
  },

  onAnimationEnded : function() {
    this.scrolling = false;
    var currentControl = this.current._control;
    this.controls.each(function(control) {
      if (control == currentControl) {
        control.addClassName("on")
      } else {
        control.removeClassName("on")
      }
    });
  }
});

Effect.SmoothScroll = Class.create(Effect.Base, {
  initialize: function(element, options) {
    this.element = $(element);
    var options = Object.extend({
      x: 0,
      y: 0,
      mode: 'absolute'
    } , options || {});
    this.start(options);
  },
  setup: function() {
    if (this.options.continuous &amp;&amp; !this.element._ext ) {
      this.element.cleanWhitespace();
      this.element._ext=true;
      this.element.appendChild(this.element.firstChild);
    }

    this.originalLeft=this.element.scrollLeft;
    this.originalTop=this.element.scrollTop;

    if(this.options.mode == 'absolute') {
      this.options.x -= this.originalLeft;
      this.options.y -= this.originalTop;
    }
  },
  update: function(position) {
    this.element.scrollLeft = this.options.x * position + this.originalLeft;
    this.element.scrollTop  = this.options.y * position + this.originalTop;
  }
});

function init() {
  $$('.carousel').each(function(carousel) {
    new widgets.Carousel(carousel);
  });
}

// When the document is loaded, start the carousels.
(XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);

return XWiki;
}(XWiki || {}));</code>
</property>
<property>
<name>Carousel</name>
</property>
<property>
<parse>0</parse>
</property>
<property>
<use>onDemand</use>
</property>
</object>
<content></content></xwikidoc>
