<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>DisplayerCode</web>
  <name>DisplayerMacros</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>DisplayerCode.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1388530800000</creationDate>
  <date>1388530800000</date>
  <contentUpdateDate>1388530800000</contentUpdateDate>
  <version>1.1</version>
  <title>DisplayerMacros</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>DisplayerCode.DisplayerMacros</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>0770b7c1-85f8-4512-a469-311334933097</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.vcenter {
    display: inline-block;
    float: none;
    vertical-align: middle;
}
.center {
  margin-left: auto;
  margin-right: auto;
  width: 100%;
}</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <content>{{velocity output="false"}}
#* Macro handling the display of a field for an item / item object.
 * 
 *#
#macro(displayItemField $item $itemObject $fieldName)
  #if($fieldName.startsWith('doc.'))#evaluate("${escapetool.d}item.${fieldName.substring(4)}")#else$item.display($fieldName, 'view', $itemObject)#end##
#end

#* Displays a block with the passed sheet from the passed source.
 * 
 * @param $sheet the sheet to use to display this block
 * @param $cssClass extra css class to be added to the block
 * @param $title the title of the block
 * @param $footer the text to display in the footer of the block
 * @param $sourceType the type of source for the items to be displayed in this block. If empty, doclist is assumed. doclist is the only type handled for now
 * @param $source the actual source for the items to be displayed. The interpretation of this param depends on the source type. For a doclist source type, the param is expected to be a list of strings, names of documents to be displayed
 * @param $sourceClass the class of the objects in the documents of the source
 * @param $sourceLimit the max number of items to use from the source, will be used from the beginning
 * @param $fields the fields to be used by the sheet. They can be in the form doc.&lt;property&gt; to use a default document property, or &lt;fieldname&gt; to use a field from the class $sourceClass. 
          The number of fields required depends on the type of block.
 *#
#macro(displayBlock $sheet $cssClass $title $footer $sourceType $source $sourceClass $sourceLimit $fields)
## print the round work of the block
(%class="blockdisplayer $!cssClass"%)(((
  #if("$!title" != '')
    (%class="blocktitle"%)(((==$title==)))
  #end
  ## prepare the documents list in variable $docList
  ## TODO: handle the other types of sources in the future
  ## Set standard field Map using basic totem items
  #set($baseFieldsMap = {"description":"description", "date":"date", "url":"url", "image":"image"})
  #if("$!sourceType" == "doclist" || "$!sourceType" == "")
    ## interpret $source as a list of strings. Responsibility of the caller to make it an actual list
    #set($blockDisplayerDocList = [])
    #foreach ($docName in $source)
      #if($xwiki.exists("$!docName"))
        #set($discard = $blockDisplayerDocList.add($xwiki.getDocument($docName)))
      #end
    #end
  #elseif("$!sourceType" == "sourceClass" &amp;&amp; "$!sourceClass" != "")
    ## retrieve data from the sourceClass
    #set($sourceTemplate = ${stringtool.replace($sourceClass,"Class","Template")})
    #set($xwqlstatement = "from doc.object(${sourceClass}) as source where doc.fullName &lt;&gt; '${sourceTemplate}' ")
    #set($query = $services.query.xwql(${xwqlstatement}))
    ## set limit
    #if("$!{sourceLimit}" != "" &amp;&amp; "$!{sourceLimit}" != "0")
      #set($query = $query.setLimit($!{sourceLimit}))
    #end
    ## execute query
    #set($results = $query.execute())
    #set($blockDisplayerDocList = [])
    #foreach($docName in $!{results})
      #if($xwiki.exists("$!docName"))
        #set($discard = $blockDisplayerDocList.add($xwiki.getDocument($docName)))
      #end
    #end
    ## update field map according data filled by the user
    #foreach($blockDisplayerFieldEntry in $!{fields.entrySet()})
      #if("$!{blockDisplayerFieldEntry.value}" != "")
        #set($discard = $baseFieldsMap.put("$!{blockDisplayerFieldEntry.key}", "$!{blockDisplayerFieldEntry.value}"))
      #end
    #end
  #end
  #set($blockDisplayerDocClass = $sourceClass)
  #set($blockDisplayerFields = $baseFieldsMap)
  (%class="blockcontent"%)((({{html clean="false" wiki="false"}}#includeInContext($sheet){{/html}})))
  ## TODO: should we do something special in this footer to escape syntax etc?
  (%class="blockfooter"%)((($footer)))
)))
#end

#* Displays a block with the passed sheet from the passed source.
 * 
 * @param $sheet the sheet to use to display this block
 * @param $cssClass extra css class to be added to the block
 * @param $title the title of the block
 * @param $footer the text to display in the footer of the block
 * @param $sourceType the type of source for the items to be displayed in this block. If empty, doclist is assumed. doclist is the only type handled for now
 * @param $source the actual source for the items to be displayed. The interpretation of this param depends on the source type. For a doclist source type, the param is expected to be a list of strings, names of documents to be displayed
 * @param $sourceClass the class of the objects in the documents of the source
 * @param $sourceLimit the max number of items to use from the source, will be used from the beginning
 * @param $fields the fields to be used by the sheet. They can be in the form doc.&lt;property&gt; to use a default document property, or &lt;fieldname&gt; to use a field from the class $sourceClass. 
          The number of fields required depends on the type of block.
 * @param $width  the width of the block
 * @param $height the height of the block
 *# 
## #macro(displayBlock $sheet $cssClass $title $footer $sourceType $source $sourceClass $sourceLimit $fields $blocWidth $blocHeight)
## ## print the round work of the block
## (%class="blockdisplayer $!cssClass" style="width:${blocWidth}px;" %)(((
##   #if("$!title" != '')
##     (%class="blocktitle"%)(((==$title==)))
##   #end
##   ## prepare the documents list in variable $docList
##   ## TODO: handle the other types of sources in the future
##   #if("$!sourceType" == "doclist" || "$!sourceType" == "")
##     ## interpret $source as a list of strings. Responsibility of the caller to make it an actual list
##     #set($blockDisplayerDocList = [])
##     #foreach ($docName in $source)
##       #if($xwiki.exists("$!docName"))
##         #set($discard = $blockDisplayerDocList.add($xwiki.getDocument($docName)))
##       #end
##     #end
##   #end
##   #set($blockDisplayerDocClass = $sourceClass)
##   #set($blockDisplayerFields = $fields)
##   #set($width   = "$!blocWidth")
##   #set($height  = "$!blocHeight")
##   (%class="blockcontent"%)((({{html clean="false" wiki="false"}}#includeInContext($sheet){{/html}})))
##   ## TODO: should we do something special in this footer to escape syntax etc?
##   (%class="blockfooter"%)((($footer)))
## )))
## #end
{{/velocity}}</content>
</xwikidoc>
