<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>TotemCode</web>
  <name>PopupSkin</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>TotemCode.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1425414384000</creationDate>
  <date>1425460342000</date>
  <contentUpdateDate>1425460342000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <object>
    <class>
      <name>XWiki.XWikiSkins</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <baseskin>
        <customDisplay/>
        <disabled>0</disabled>
        <name>baseskin</name>
        <number>2</number>
        <picker>0</picker>
        <prettyName>Base Skin</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </baseskin>
      <edit.vm>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>edit.vm</name>
        <number>9</number>
        <picker>0</picker>
        <prettyName>Edit</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </edit.vm>
      <footer.vm>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>footer.vm</name>
        <number>6</number>
        <picker>0</picker>
        <prettyName>Footer</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </footer.vm>
      <header.vm>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>header.vm</name>
        <number>5</number>
        <picker>0</picker>
        <prettyName>Header</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </header.vm>
      <logo>
        <customDisplay/>
        <disabled>0</disabled>
        <name>logo</name>
        <number>3</number>
        <picker>0</picker>
        <prettyName>Logo</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </logo>
      <name>
        <customDisplay/>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <picker>0</picker>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <style.css>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>style.css</name>
        <number>4</number>
        <picker>0</picker>
        <prettyName>Style</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </style.css>
      <view.vm>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>view.vm</name>
        <number>8</number>
        <picker>0</picker>
        <prettyName>View</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </view.vm>
      <viewheader.vm>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>viewheader.vm</name>
        <number>7</number>
        <picker>0</picker>
        <prettyName>View Header</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </viewheader.vm>
    </class>
    <name>TotemCode.PopupSkin</name>
    <number>0</number>
    <className>XWiki.XWikiSkins</className>
    <guid>88d7ec49-7691-4832-965a-4cec0d8b2caa</guid>
    <property>
      <baseskin>flamingo</baseskin>
    </property>
    <property>
      <edit.vm>###
### Main "edit" template
###
### General wrapper for edit actions
###
##
## Is the document being edited by another user?
## If yes, warn about it and show a forcing link:
##
#if($tdoc.getLocked() &amp;&amp; "$!request.get('force')" == '')
  #template("startpage.vm")
  &lt;div class="main layoutsubsection"&gt;
   &lt;div id="mainContentArea"&gt;
    ##
    $response.setStatus(423)
    #set($newquerystring = "$!{request.getQueryString().replaceAll('&amp;', '&amp;amp;').replaceAll('&amp;amp;amp;', '&amp;amp;')}"
                         + '&amp;amp;force=1')
    #set($forceEditURL = $doc.getURL($xcontext.getAction(), ${newquerystring}))
    #xwikimessageboxstart($services.localization.render('notice') "$services.localization.render('doclockedby') $xwiki.getUserName($doc.getLockingUser())")
    &lt;a href="$forceEditURL"&gt;$services.localization.render('forcelock')&lt;/a&gt;
    #xwikimessageboxend()
    ##
   &lt;/div&gt;## mainContentArea
  &lt;/div&gt;## main layoutsubsection
  #template("endpage.vm")
#else
  ##
  ## Determine what editor to show
  ##
  #if("$!editor" == '')
    ## Normally no special characters should exist in the editor parameter, so this is just a protection measure.
    #set($editor = "$!{escapetool.xml($request.getParameter('editor'))}")
    #if($editor == '')
      ## Determine the sheets using the default document translation because objects are accessible only from the default translation.
      #if(!$services.sheet.getSheets($doc, $xcontext.action).isEmpty())
        #set($editor = 'inline')
      #elseif (($xwiki.getUserPreference('editor') == 'Wysiwyg') &amp;&amp; ($tdoc.syntax.toIdString() == 'xwiki/1.0' &amp;&amp; !$tdoc.isAdvancedContent() || $services.wysiwyg.isSyntaxSupported($tdoc.syntax.toIdString())))
        #set($editor = 'wysiwyg')
      #else
        #set($editor = 'wiki')
      #end
    #end
  #end
  #if($editor == 'inline')
    ## The inline editor uses the view layout, unlike the rest of the editors.
    ##template('startpage.vm')
	##startpage.vm
	#template("xwikivars.vm")
	#template("layoutvars.vm")
	#template("htmlheader.vm")
	##template("header.vm")
	&lt;div class="content#if($showLeftPanels == "0")hideleft#end#if($showRightPanels == "0")hideright#end" id="contentcontainer"&gt;
	&lt;div id="contentcontainerinner"&gt;
	&lt;div class="leftsidecolumns"&gt;
	#if($hidecolumns &amp;&amp; ($!hidecolumns == 1))
	  &lt;div id="contentcolumn" class="contenthidelefthideright"&gt;
	#else
	  &lt;div id="contentcolumn"&gt; ## class="content#if($showLeftPanels == "0")hideleft#end#if($showRightPanels == "0")hideright#end"&gt;
	#end
	##End of startpage.vm
    ##template('editinline.vm')
	##------------------------- editinline.vm -----------------------------
	## Insert JS and CSS needed for the fullscreen edit feature
		$xwiki.jsfx.use('uicomponents/widgets/fullScreen.js', {'forceSkinAction': true, 'language': ${xcontext.language}})##
		$xwiki.ssfx.use('uicomponents/widgets/fullScreen.css', true)##
		#set($formname = "inline")
		#set($saveaction = "save")
		#set($previewenabled = true)
		## Determine if editing should be allowed
		#set($force = $!request.get("force"))
		#set($allowDocEdit = !(($doc.getLocked()==true)&amp;&amp;(!$force)) )
		##
		&lt;div class="main"&gt;
		&lt;div id="mainContentArea"&gt;
		## ----------------------------------------------------------------------------
		## Start FORM at start of content area IF editing is allowed.
		## ----------------------------------------------------------------------------
		#if ($allowDocEdit)
		 &lt;form id="inline" method="post" action="$doc.getURL("preview")" class="withLock"&gt;
		#end
		## Edit parent button added here explicitly because inline mode is handled specially in edit.vm and does not behave like the other edit modes.
		&lt;div class='edit-meta-tools'&gt;
		  ##&lt;a id='editParentTrigger' class='tool edit-parent' href='#mainEditArea' title="$services.localization.render('core.editors.content.parentField.edit.title')"&gt;[$services.localization.render('core.editors.content.parentField.edit')]&lt;/a&gt;
		&lt;/div&gt;
		##template("hierarchy.vm")
		&lt;div class="row"&gt;
		  &lt;div id="editMeta" class="col-xs-12 col-md-7"&gt;
			#template('editmeta.vm')
			## ----------------------------------------------------------------------------
			## Compute title to display and modify rendered content accordingly.
			## ----------------------------------------------------------------------------
			#set ($renderedContent = $cdoc.getRenderedContent())
			#template("titlevars.vm")
			## ----------------------------
			## Display the title
			## ----------------------------
			&lt;div id="document-title"&gt;&lt;h1&gt;$titleToDisplay&lt;/h1&gt;&lt;/div&gt;
		  &lt;/div&gt;
		  #if($displayContentMenu)
			&lt;div class="col-xs-12 col-md-5"&gt;
			  ##template("menus_content.vm")
			&lt;/div&gt;
		  #end
		&lt;/div&gt;
		##
		## If the document cannot be edited, display an information and a forcing link:
		##
		#if (!$allowDocEdit)
		  &lt;div&gt;
		  $response.setStatus(423)
		  #set($newquerystring = "$!{request.getQueryString().replaceAll('&amp;', '&amp;amp;').replaceAll('&amp;amp;amp;', '&amp;amp;')}&amp;amp;force=1")
		  #set($forceEditURL = $doc.getURL($xcontext.action, ${newquerystring}))
		  #xwikimessageboxstart($services.localization.render('notice') "$services.localization.render('doclockedby') $xwiki.getUserName($doc.getLockingUser())")
			&lt;a href="$forceEditURL"&gt;$services.localization.render('forcelock')&lt;/a&gt;
		  #xwikimessageboxend()
		  &lt;/div&gt;
		#else
		##
		## Otherwise, can edit - continue the form.
		##
		&lt;div&gt;
		&lt;input type="hidden" name="xcontinue" value="$doc.getURL($doc.getDefaultEditMode(), 'editor=inline')"/&gt;
		## CSRF prevention
		&lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" /&gt;
		## This input is used by the full screen widget: it stores the selector of the maximized element, so that the full screen can be restored when coming back from preview.
		&lt;input type="hidden" name="x-maximized" value="$!{escapetool.xml(${request.get('x-maximized')})}" /&gt;
		&lt;input type="hidden" name="xredirect" value="$!{escapetool.xml($request.get('xredirect'))}" /&gt;
		&lt;input type="hidden" name="xnotification" value="$!{escapetool.xml($request.get('xnotification'))}" /&gt;
		&lt;input type="hidden" name="template" value="$!{escapetool.xml($request.template)}" /&gt;
		## We need to submit the language of the translated document because the inline edit mode is not limited to editing only
		## the objects, which are shared by all translations. We can also edit the content or the title of the document which are
		## specific to each translation and so we need to specify which translation is being edited.
		&lt;input type="hidden" name="language" value="$!{escapetool.xml($tdoc.realLanguage)}" /&gt;
		#if("$!request.parent" != '')
		  &lt;input type="hidden" name="parent" value="$escapetool.xml($!request.parent)" /&gt;
		#end
		#if("$!request.title" != '')
		  &lt;input type="hidden" name="title" value="$escapetool.xml($!request.title)" /&gt;
		#end
		#if("$!request.xhidden" != '')
		  &lt;input type="hidden" name="xhidden" value="$escapetool.xml($!request.xhidden)" /&gt;
		#end
		## ----------------------------
		## Display the rendered content
		## ----------------------------
		$renderedContent
		#set($editactions = "bottom")
		&lt;div class="bottombuttons"&gt;#template("editactions.vm")&lt;/div&gt;
		&lt;/div&gt; ## form
		&lt;/form&gt;
		#template("textarea_wysiwyg.vm")
		#end ## can edit
		&lt;/div&gt; ## mainContentArea
		&lt;/div&gt; ## main
	##---------------------------------------------------------------------
    ##template('endpage.vm')
  #else
  ##
  ## "Compute" the title
  ##
  #set ($title = $services.localization.render("platform.web.editors.${editor}.pageTitle", [$tdoc.plainTitle]))
  #if ($title == "platform.web.editors.${editor}.pageTitle")
    #set ($title = $services.localization.render('platform.web.editors.unknown.pageTitle', [$tdoc.plainTitle]))
  #end
  ##
  ## Header
  ##
  #template("xwikivars.vm")
  #template("layoutvars.vm")
  #template("htmlheader.vm")
  #if($displayMainMenu)
    &lt;div id="menuview"&gt;
      #template("menuview.vm")
    &lt;/div&gt;
  #end
  #template("header.vm")
  #if($editor == 'wiki' || $editor == 'wysiwyg')
    &lt;form id="edit" method="post" action="$doc.getURL('preview')" class="withLock"&gt;
    &lt;div class="hidden"&gt;
    ## CSRF prevention
    &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" /&gt;
    ## Pass the section number when the form is submitted in order to affect only the specified section.
    ## We need to test if the section number is present to prevent a NumberFormatException for the empty string.
    #if("$!{request.section}" != '')
      &lt;input type="hidden" name="section" value="$!{escapetool.xml($request.section)}" /&gt;
    #end
    ## This input is used by the full screen widget: it stores the selector of the maximized element, so that the full screen can be restored when coming back from preview.
    &lt;input type="hidden" name="x-maximized" value="$!{escapetool.xml($request.get('x-maximized'))}"/&gt;
    &lt;/div&gt;
  #end
  ##################
  ##   Edit zone  ##
  ##################
  &lt;div id="xwikieditor" class="layoutsection"&gt;
  &lt;div id="xwikieditorinner"&gt;
  &lt;div class="leftsidecolumns"&gt;
  &lt;div id="editcolumn" class="editor editor-${editor}"&gt;
  &lt;div class="alleditcontent"&gt;
  #if($displayEditMenu)
    &lt;div id="editmenu" class="actionmenu"&gt;
      #template("editmenu.vm")
    &lt;/div&gt;
  #end
  &lt;div id="mainEditArea"&gt;
  #template("hierarchy.vm")
  #if (($editor == 'wiki' || $editor == 'wysiwyg') &amp;&amp; !$request.section)
    #template('editmeta.vm')
  #end
  #template("edit${editor}.vm")
  ## This javascript must be placed here since it uses velocity variables set in the template above.
  &lt;script type="text/javascript"&gt;
    //&lt;![CDATA[
    if ($('tmEditWysiwyg')) {
      // Manage switch from wiki to wysiwyg, content must be preserved between those editors.
      Event.observe($('tmEditWysiwyg'), "click", function(event) {
        #if($doc.syntax.toIdString() == "xwiki/1.0")
        if (checkAdvancedContent("$services.localization.render('checkadvancedcontent')") == false) {
          Event.stop(event);
          return;
        }
        #end
        document.forms.${formname}.action='$doc.getURL("edit", "editor=wysiwyg&amp;$languageparams")';
        document.forms.${formname}.submit();
        Event.stop(event);
      });

      // Manage switch from wysiwyg to wiki, content must be preserved between those editors.
      Event.observe($('tmEditWiki'), "click", function(event) {
        document.forms.${formname}.action='$doc.getURL("edit", "editor=wiki&amp;$languageparams")';
        document.forms.${formname}.submit();
        Event.stop(event);
      });
    }
    //]]&gt;
  &lt;/script&gt;
  &lt;/div&gt; ## mainEditArea
  &lt;/div&gt; ## alleditcontent
  &lt;/div&gt; ## editcolumn
  &lt;div class="clearfloats"&gt;&lt;/div&gt;
  &lt;/div&gt; ## leftsidecolumns
  #template("editpanels.vm")
  &lt;div class="clearfloats"&gt;&lt;/div&gt;
  &lt;/div&gt; ## xwikieditorinner
  &lt;/div&gt; ## xwikieditor
  ##
  ## Footer
  ##
  #if($editor == 'wiki' || $editor == 'wysiwyg')
    &lt;/form&gt;
  #end
  #template("footer.vm")
  #template("htmlfooter.vm")
  #end ## $editor != 'inline'
#end
</edit.vm>
    </property>
    <property>
      <footer.vm/>
    </property>
    <property>
      <header.vm/>
    </property>
    <property>
      <logo/>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <style.css/>
    </property>
    <property>
      <view.vm>###
### Main "view" template
###
### General wrapper for view actions
###
  #template("xwikivars.vm")
  ##template("layoutvars.vm")
  #template("htmlheader.vm")
  ##template("header.vm")
  &lt;div id="mainContentArea"&gt;
	###
		### Display document contents in "view" mode.
		###
		## -------------------------------
		## Compute the content to display 
		## -------------------------------
		## Honor the syntax if it's passed in the request.
	  #set($outputSyntax = $xwiki.getAvailableRendererSyntax($request.outputSyntax, $request.outputSyntaxVersion))
	  #if ($outputSyntax)
		## If the passed syntax is not an HTML-compatible syntax we need to HTML-escape it so that it can be
		## displayed fine in HTML (since at the point this vm file is called we're already inside an HTML page with
		## panels on the side, header, etc).
		#set($syntaxType = $outputSyntax.type.toIdString())
		#if (($syntaxType == "xhtml") || ($syntaxType == "html"))
		  #set ($renderedContent = $tdoc.getRenderedContent($outputSyntax))
		#else
		  ## Make sure to print correctly the result when it's not HTML
		  #set ($renderedContent = "&lt;pre&gt;$escapetool.html($tdoc.getRenderedContent($outputSyntax))&lt;/pre&gt;")
		#end
	  #else
		#set ($renderedContent = $tdoc.getRenderedContent())
	  #end
		## ----------------------------------------------------------------------------
		## Display UI Extensions before the title element
		## ----------------------------------------------------------------------------
		#foreach ($uix in $services.uix.getExtensions('org.xwiki.platform.template.title.before'))
		  $services.rendering.render($uix.execute(), 'xhtml/1.0')
		#end
		## ----------------------------------------------------------------------------
		## Compute title to display and modify rendered content accordingly.
		## ----------------------------------------------------------------------------
		#template("titlevars.vm")
		## ----------------------------
		## Display the title
		## ----------------------------
		##&lt;div id="document-title"&gt;&lt;h1&gt;$titleToDisplay&lt;/h1&gt;&lt;/div&gt;
		## --------------------------------------------------------------------------
		## Drop permissions as they are no longer needed. This allows us not to have
		## to review the code below for security holes since nothing bad can happen.
		## --------------------------------------------------------------------------
		$xcontext.dropPermissions()
		## ----------------------------
		## Display the shortcuts
		## ----------------------------
		#if($displayShortcuts)
		  #template("shortcuts.vm")
		#end
		## ----------------------------
		## Display the rendered content
		## ----------------------------
		&lt;div id="xwikicontent"&gt;
		  #if ("$!exception" != '')
			#displayUnhandledException($exception)
		  #else
			$renderedContent
		  #end
		&lt;/div&gt;
		## -----------------------------------------------------------------------------------
		## Display the footnotes if the document is in 1.0 syntax and if there are any defined
		## -----------------------------------------------------------------------------------
		#set($footnotes = "#putFootnotes()")
		$xwiki.renderText($footnotes, $doc)
		###template("contentview.vm")
  &lt;/div&gt;## mainContentArea</view.vm>
    </property>
    <property>
      <viewheader.vm/>
    </property>
  </object>
  <content/>
</xwikidoc>
