<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>TotemCode</web>
  <name>TotemSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>TotemCode.TotemClass</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1399932000000</creationDate>
  <date>1425487504000</date>
  <contentUpdateDate>1425460342000</contentUpdateDate>
  <version>1.1</version>
  <title>#if($doc.name == 'TotemSheet')Totem Sheet#{else}$services.display.title($doc, {'displayerHint': 'default'})#end</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>TotemCode.TotemSheet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>051ad43d-c5cc-4f31-9032-9fb070f3e28e</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var XWiki = (function (XWiki) {
  var widgets = XWiki.widgets = XWiki.widgets || {};
  widgets.TotemEditor = Class.create({
  initialize: function() {
    this.hookEditOrder();
    $$('.totemBlocks .totemBlock').each(function(item){
      this.hookDeleteButton(item);
    }.bind(this));
    
    this.hookAddButton();
  },
  
  hookEditOrder : function () {
    // find the editorder form
    var editForm = $$('form.editorderform')[0];
    if (!editForm) {
      return;
    }
    this.editOrderForm = editForm;
    // find the input
    // this name is not always the same here, but will work in 80% of the cases, at least
    var orderInput = editForm.down("input[name='TotemCode.TotemClass_0_blockOrder']")
    if (!orderInput) {
      return;
    }
    this.blockOrderInput = orderInput;
    this.setupDragDrop();
    // hide the input and disable the save button until a change is made
    this.blockOrderInput.addClassName('hidden');
    // find the button and disable it
    var saveButton = editForm.down('input[type=submit]');
    if (saveButton) {
      saveButton.writeAttribute('disabled', 'disabled');
    }
  },
  
  setupDragDrop : function() {
    var onMove = this.onBlockMoved.bind(this);
    Sortable.create('totemBlocks', {
      tag: 'div',
      only: 'totemBlock',
      handle: 'blocktitle', 
      overlap: 'vertical', 
      scroll: window, 
      dropOnEmpty: true, 
      constraint: false,
      ghosting: false,
      hoverclass: 'blocktitle-hover-highlight',
      onUpdate: onMove
    });
  },
  
  onBlockMoved : function() {
    // write the new block order
    var newBlockOrder = $$('.totemBlock').collect(function(item) { return item.readAttribute('id').substring(11); }).join(',');
    this.blockOrderInput.value = newBlockOrder;
    // enable the save button
    var saveButton = this.editOrderForm.down('input[type=submit]');
    if (saveButton) {
      saveButton.writeAttribute('disabled', false);
    }
  },
  
  hookEditButton : function(totemBlockItem) {
    // find the edit button in the actions
    var editButton = totemBlockItem.down('.editactions .editbutton');
    if (!editButton) {
      return;
    }
    editButton.observe('click', function(event) {
      // find the edit form and show it
      var editForm = totemBlockItem.down('.editblockform');
      if (!editForm) {
        return;
      }
      // we have an edit form, stop the event
      event.stop();
      editForm.removeClassName('hidden');
      var blockDisplayer = totemBlockItem.down('.blockdisplayer');
      if (blockDisplayer) {
        blockDisplayer.addClassName('hidden');
      }
      var editSourceForm = totemBlockItem.down('.editsourceblockform');
      if (editSourceForm) {
        editSourceForm.addClassName('hidden');
      }
    });
    // find the cancel button of this edit form and make it hide the form
    var cancelButton = totemBlockItem.down('.editblockform a.cancelbutton');
    if (cancelButton) {
      cancelButton.observe('click', function(event){
        var editForm = event.findElement('.editblockform');
        if (!editForm) {
          return;
        }
        event.stop();
        editForm.addClassName('hidden');
        var blockDisplayer = totemBlockItem.down('.blockdisplayer');
        if (blockDisplayer) {
          blockDisplayer.removeClassName('hidden');
        }
      }.bind(this));
    }
  },
  
  hookEditSourceButton : function(totemBlockItem) {
    // find the edit button in the actions
    var editSourceButton = totemBlockItem.down('.editactions .editsourcebutton');
    if (!editSourceButton) {
      return;
    }
    editSourceButton.observe('click', function(event) {
      // find the edit form and show it
      var editSourceForm = totemBlockItem.down('.editsourceblockform');
      if (!editSourceForm) {
        return;
      }
      // we have an edit form, stop the event
      event.stop();
      editSourceForm.removeClassName('hidden');
      var blockDisplayer = totemBlockItem.down('.blockdisplayer');
      if (blockDisplayer) {
        blockDisplayer.addClassName('hidden');
      }
      var editForm = totemBlockItem.down('.editblockform');
      if (editForm) {
        editForm.addClassName('hidden');
      }
    });
    // find the cancel button of this edit form and make it hide the form
    var cancelButton = totemBlockItem.down('.editsourceblockform a.cancelbutton');
    if (cancelButton) {
      cancelButton.observe('click', function(event){
        var editForm = event.findElement('.editsourceblockform');
        if (!editForm) {
          return;
        }
        event.stop();
        editForm.addClassName('hidden');
        var blockDisplayer = totemBlockItem.down('.blockdisplayer');
        if (blockDisplayer) {
          blockDisplayer.removeClassName('hidden');
        }
      }.bind(this));
    }
  },
  
  hookDeleteButton : function(totemBlockItem) {
    // get the delete form and add a conversation message to the submit
    var deleteForm = totemBlockItem.down('form.removeblockform');
    deleteForm.observe('submit', function(event){
      event.stop();
      var _this = event.findElement('form.removeblockform');
      new XWiki.widgets.ConfirmationBox(
        {
          onYes : function() {_this.submit();},
        },
        {confirmationText: "$msg.get('totem.edit.removeitem.confirmation')",}
        )
    }.bind(this));
  },
  
  hookAddButton : function() {
    // find the edit button in the actions
    var addButton = $$('.addactions a.addblock')[0];
    if (!addButton) {
      return;
    }
    addButton.observe('click', function(event) {
      // find the edit form and show it
      var addForm = $$('.addblockform')[0];
      if (!addForm) {
        return;
      }
      // we have an edit form, stop the event
      event.stop();
      addForm.removeClassName('hidden');
    });
    // find the cancel button of this add form and make it hide the form
    var cancelButton = $$('.addblockform a.cancelbutton')[0];
    if (cancelButton) {
      cancelButton.observe('click', function(event){
        var addForm = event.findElement('.addblockform');
        if (!addForm) {
          return;
        }
        event.stop();
        addForm.addClassName('hidden');
      }.bind(this));
    }
  }
});
  return XWiki;
}(XWiki || {}));

document.observe('xwiki:dom:loading', function() {
  new XWiki.widgets.TotemEditor();
});</code>
    </property>
    <property>
      <name>Totem javascript</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>TotemCode.TotemSheet</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>ee885013-5ae2-493a-84e9-91bdaad0b23f</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>document.observe('xwiki:dom:loading', function() {
// Configure require.js to use Colpick (https://github.com/josedvq/colpick-jQuery-Color-Picker/)
require.config({
  paths: {
    'colpick': '$services.webjars.url('colpick/2.0.2/js/colpick.js')'
  },
  shim: {
    'colpick' : ['jquery']
  }
});
// Beginning of the script
require(['jquery', 'colpick'], function($, Colpick) {

  // Get the inputs that need to be enhanced
  var inputs = $('.color-picker');
  
  // For each input
  for (var i=0; i&lt;inputs.length; ++i) {
    var input = $(inputs[i]);
    var parent = input.parent();
    
    // Create the color preview box
    parent.append('&lt;span class="input-group-addon"&gt;&lt;span class="color-preview"&gt;&lt;/span&gt;&lt;/span&gt;');
    
    // Update the color preview box
    parent.find('.color-preview').css('background-color', input.val());
    
    // Enable the color picker
    input.colpick({
      layout: 'hex',
      submit: true,
      color: input.val(),
      onSubmit: function(hsb, hex, rgb, el) {
        var element = $(el);
        // Hide the color picker
        element.colpickHide();
        // Update the filled value
        element.val('#'+hex);
        // Update the color preview box
        element.parent().find('.color-preview').css('background-color', '#'+hex);
        // Emit the "change" event
        element.trigger('change');
      }
    });
    
    // If the user write a value manually
    input.keyup(function(event){
      var element = $(event.target);
      // Update the color preview box
      element.parent().find('.color-preview').css('background-color', element.val());
      // Update the color picker
      element.colpickSetColor(element.val(), false);
    });
  }
  
  // Hide the color picker if the user scrolls
  $('.tab-content').scroll(function(){
    // For each input
    for (var i=0; i&lt;inputs.length; ++i) {
      var input = inputs[i];
      $(input).colpickHide();
    }
  });
});

});</code>
    </property>
    <property>
      <name>Color picker</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>TotemCode.TotemSheet</name>
    <number>2</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>74d894ba-d5c1-4c8f-9403-ebecbd361432</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>document.observe('xwiki:dom:loaded', function() {
  // Use JQuery
  require(['jquery'], function($) {
    // The following script will allow to update the hidden input data with the specific additional data for displayers
    // Additonal Datas are displayed as individual input and are all saved in a common textarea field.
    // ****
    function updateHiddenInputData() {
      // get displayer additonal data inputs
      var additionalDataInputList = $('.displayerAdditionalData');
      additionalDataInputList.each( function() {
        // observe Change event
        $(this).change(function() {
          var dataValues = "";
          // get the list of input with class .displayerAdditionalData from the parent
          var additionalDataParent = $(this).parent().parent();
          var total = additionalDataParent.find('.displayerAdditionalData').length;
          additionalDataParent.find('.displayerAdditionalData').each( function(index) {
            // store field data
            dataValues += $(this).attr('name') + ":" + $(this).val();
            if (index != total - 1) {
              dataValues += ",";
            }
          });
          // update the data hidden input
          additionalDataParent.find('input[type=hidden]').val(dataValues);
        });
      });
    }
    // call our updateHiddenInputData function
    updateHiddenInputData();
    updateHiddenInputData();
    updateHiddenInputData();
    // update the additional specific to match the selected displayer
    $("select[id*='type']").change( function() {
      // get the addtional data container
      var additionalDataDiv = $(this).parents().eq(2).find('.additionalData');
      // TotemCode.TotemAdditionalDataDisplayer page is used to build the displayer specific input
      // we build the url to access it
      var additionalDataDisplayerUrl = "$xwiki.getURL('TotemCode.TotemAdditionalDataDisplayer', 'get', '')?totem=" + $(this).val();
      additionalDataDisplayerUrl += "&amp;totemBlock=" + $(this).closest(".totemBlock").attr("id")
      // then we call it in ajax
      $.ajax({
        url: additionalDataDisplayerUrl,
      }).done(function( html ) {
        // update the additionalData container
        $(additionalDataDiv).html(html);
        // bind the new inputs
        updateHiddenInputData();
      });
    });
  });
});



</code>
    </property>
    <property>
      <name>Displayer additional Data </name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>TotemCode.TotemSheet</name>
    <number>3</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>20888b66-d110-4366-812e-c3c349ff4e07</guid>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
      <code>var editContentURL = "$xwiki.getURL('TotemCode.EditContent','view')";
require(['jquery'], function ($) {
$(function(){
      //Initialize edit Totem buttons
      $(".editbutton").click(function(event){
           event.preventDefault();
           var blockNumber = $(this).attr("rel");
           var totemDocRef = $("#totemDocRef").val();
           var editURL = editContentURL + "?action=editTotemBlock" + "&amp;totemDocRef=" + totemDocRef + "&amp;blockNumber=" + blockNumber;
           var redirectURL = $("#redirectURL").val();
           $("#editIframe").attr("src",editURL);
           $("#totemModal .modal-dialog").addClass("modal-lg");
           $("#totemModal .modal-body").addClass("loadingModal");
           $("#totemModal .modal-title").html("$services.localization.render('totem.edit.configuresection.title')");
           $("#totemModal").modal("show");
           //Initialize iframe buttons
           $("#editIframe").load(function(event){
              if($("#showIframe").val() == "1"){ 
                 $(this).show();
                 $("#totemModal .modal-body").removeClass("loadingModal");
              }
              $(this).contents().find(".saveBlockBtn").click(function(){
                 $("#showIframe").val("0");
                 $("#totemModal .modal-body").addClass("loadingModal");
                 $("#editIframe").hide();
              });   
              if($(this).contents().find("#redirectURL").length &gt; 0){
                 document.location.replace(redirectURL);   
              }
           });
      });
      $(".editsourcebutton").click(function(event){
           var blockNumber = $(this).attr("rel");
           var totemDocRef = $("#totemDocRef").val();
           var editURL = editContentURL + "?action=editTotemBlockSource" + "&amp;totemDocRef=" + totemDocRef + "&amp;blockNumber=" + blockNumber;
           var redirectURL = $("#redirectURL").val();
           $("#editIframe").attr("src",editURL);
           $("#totemModal .modal-dialog").addClass("modal-lg");
           $("#totemModal .modal-body").addClass("loadingModal");
           $("#totemModal .modal-title").html("$services.localization.render('totem.edit.configuresectionelements.title')");
           $("#totemModal").modal("show");
           //Initialize iframe buttons
           $("#editIframe").load(function(event){
              if($("#showIframe").val() == "1"){ 
                 $(this).show();
                 $("#totemModal .modal-body").removeClass("loadingModal");
              }
              $(this).contents().find(".saveSourceBtn").click(function(){
                 $("#showIframe").val("0");
                 $("#totemModal .modal-body").addClass("loadingModal");
                 $("#editIframe").hide();
              });   
              if($(this).contents().find("#redirectURL").length &gt; 0){
                 document.location.replace(redirectURL);   
              }
              //Initialize cancel edit block source button
              $(this).contents().find("a.cancelbutton").click(function(event){
                 event.preventDefault();
                 $("#totemModal").modal("hide");
              });
              //Initialize the elements admin button
              $(this).contents().find(".adminItemsBtn").click(function(event){
                 event.preventDefault();
                 var editURL = $(this).attr("href");
                 $("#editIframe").attr("src",editURL);
              });
            });
           event.preventDefault();
      });
   });//endReady
});</code>
    </property>
    <property>
      <name>Edit Totem content on page</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>TotemCode.TotemSheet</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>ad3ccc13-bcaf-4352-82cc-4f076e90b678</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.totemBlock .removeblockform {
  display: inline;
}

.totemBlock .editactions {
  /*text-align: right;*/
}

.totemBlocksEdit .blocktitle {
   cursor: move;
}
</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Totem editor stylesheet</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>TotemCode.TotemSheet</name>
    <number>1</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>ec0a0939-5617-4be2-bf54-e19958e01de5</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.loadingModal{
   background-image: url("$xwiki.getSkinFile('icons/xwiki/ajax-loader-large.gif')");
   background-repeat: no-repeat;
   background-position: center;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Edit Totem on page CSS</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <content>{{include document="DisplayerCode.DisplayerMacros" /}}
{{include document="TotemCode.TotemMacros" /}}

{{velocity output="false"}}
$xwiki.ssx.use('DisplayerCode.DisplayerMacros')
{{/velocity}}

{{velocity}}
#set($xwikipanelwidth = 0)
#set($rightPanelsWidth= 0)

## set a couple of constants that we want to be able to edit fast.
## 1/ class items of the totem
#set($totemItemClass = 'TotemCode.SimpleTotemItemClass')
## 2/ a couple of mappings between the different types of blocks and the items from this totem class that should be used. 
## TODO: Normally this should be demanded by the sheet somehow but I don't know exactly how for now :(
## NOTE: This approach base is no used for the moment
#set($sheetFieldsMapping = {'DisplayerCode.ListDisplayerSheet' : ['date', 'doc.title', 'url'],  'DisplayerCode.EvenementDisplayer' : ['image', 'doc.title', 'url']})
## 3/ the page where the items to be displayed in totem blocks are held: the page called items in the current space
#set($totemItemsURL = $xwiki.getURL('Items'))
## figure out if we're in edit mode. If we are but the document is loaded for editing in the wysiwyg, then pretend we're in view :) -- this makes include work
#set($isEdit = ($xcontext.action == "inline" || $xcontext.action == "edit") &amp;&amp; "$!request.xpage" != 'wysiwyginput')
#set($enableEdit = "$!request.showEdit" == "true")
#if (!$hasEdit)
  ## if user does not have edit right, editing is not enabled
  #set($enableEdit = false)
#end
## put the edit url in a var, so that we go to the edit mode using this url whenever needed
#set($editURL = $doc.getURL('view', 'showEdit=true'))
#if (!$isEdit)
  ## include the extra ssx / jsx for the totem, as set in the totem object
  #set($extraSSX = $doc.getObject('TotemCode.TotemClass').getProperty('ssx').value)
  #if("$!extraSSX" != "")
    #set($discard = $xwiki.ssx.use($extraSSX))
  #end
  #set($extraJSX = $doc.getObject('TotemCode.TotemClass').getProperty('jsx').value)
  #if("$!extraJSX" != "")
    #set($discard = $xwiki.jsx.use($extraJSX))
  #end
  ## if edit is enabled, add the jsx and the ssx of the totemsheet (for enhancements of the edit form)
  ## IMHO no ssx/jsx from the sheet should be needed in view mode, I don't see any totem generic styling that could be done in view mode: 
  ## displayers will do their styling for blocks, the extra jsx / ssx will handle styling specific to a particular totem.

    #set($discard = $xwiki.jsx.use('TotemCode.TotemSheet'))
  #if ($enableEdit)
    #set($discard = $xwiki.jsfx.use("js/scriptaculous/effects.js"))
    #set($discard = $xwiki.jsfx.use("js/scriptaculous/dragdrop.js"))
    #set($discard = $xwiki.jsx.use('TotemCode.TotemSheet', {'minify' : false}))
    #set($discard = $xwiki.ssx.use('TotemCode.TotemSheet', {'minify' : false}))
  #end
  ## pass the totem application fullscreen
  #set($enableFullscreen = $doc.getObject('TotemCode.TotemClass').getProperty('fullscreen').value)
  #if($enableFullscreen == 1 )
    #set($discard = $xwiki.ssx.use('TotemCode.TotemFullscreen', {'minify' : false}))  
    #set($discard = $xwiki.jsx.use('TotemCode.TotemFullscreen'))
  #end
  ## make up the cancel URL for the form cancellation and other cancels
  #set($cancelURL = $doc.getURL())
  #if ($enableEdit)
    ## if editing is enabled, forms should be cancelled to the base edit screen
    #set($cancelURL = $doc.getURL('view', 'showEdit=true'))
  #end
  ## if edit is enabled, add the input and form to save the order of the blocks which will be edited in js
  #if ($enableEdit)
    {{info}}
    #displayEditTotemConfigurationForm()
    {{/info}}
    ----
    {{info}}
    $msg.get('totem.edit.editorder.info')    
    #displayEditOrderForm($editURL)
    {{/info}}
  #end
  ## view mode of a totem
  ## get all the objects of type TotemBlockClass in the order defined in here and display them with the macro
  #set($blockNumbers = $doc.getObject('TotemCode.TotemClass').getProperty('blockOrder').value.split(','))
  ## remember the displayed blocks, so that we can display all undisplayed blocks after the order read
  #set($displayedBlocks = [])
  (%class="container-fluid"%)(((
    (%class="totemBlocks #if($enableEdit)totemBlocksEdit#end row" id="totemBlocks"%)(((
      #set($isOdd = true)
      #foreach($blockNumber in $blockNumbers)
        #set($intNumber = $mathtool.toInteger($blockNumber))
        #set($totemBlock = $doc.getObject('TotemCode.TotemBlockClass', $intNumber))
        #set($totemBlockSize = 12 )
        #if("$!{totemBlock.size}" != "")
          #set($totemBlockSize = ${totemBlock.size})
        #end
        #if ($totemBlock)
          #set($urlBackground = $doc.getAttachmentURL("${totemBlock.getValue('background-image')}"))
          (%class="totemBlock #if($isOdd)totemBlock-odd#{else}totemBlock-even#end col-sm-${totemBlockSize}" id="totemBlock_${totemBlock.number}" style="background:url(${urlBackground});  background-size: 100% 100%; background-color: ${totemBlock.background-color};  object-fit: cover;"%)(((
            #displayTotemBlock($totemBlock, $enableEdit, $cancelURL, $editURL $totemItemClass, $sheetFieldsMapping, $totemItemsURL)
          )))
          #set($discard = $displayedBlocks.add($totemBlock.number))
          #set($isOdd = !$isOdd)
        #end
      #end
      ## for all the blocks that were not displayed before, display them
      #foreach($totemLeftBlock in $doc.getObjects('TotemCode.TotemBlockClass'))
        #if(!$displayedBlocks.contains($totemLeftBlock.number))
        #set($urlBackground = $doc.getAttachmentURL("${totemLeftBlock.getValue('background-image')}"))
          (%class="totemBlock #if($isOdd)totemBlock-odd#{else}totemBlock-even#end col-sm-${totemBlockSize}" id="totemBlock_${totemLeftBlock.number}" style="background:url(${urlBackground});  background-size: 100% 100%; background-color: ${totemLeftBlock.background-color};  object-fit: cover;"%)(((
            #displayTotemBlock($totemLeftBlock, $enableEdit, $cancelURL, $editURL $totemItemClass, $sheetFieldsMapping, $totemItemsURL)
          )))
          #set($discard = $displayedBlocks.add($totemBlock.number))
          #set($isOdd = !$isOdd)
        #end
      #end
    )))
  )))

  ## add new block item form
  #if($enableEdit)
    (%class="addactions"%)(((
     [[$msg.get('totem.edit.additem.button')&gt;&gt;path:$doc.getURL('view', 'showEdit=true&amp;additem=true')||class="addblock"]]
      ## display a button to exit the edit form. TODO: move me in an appropriate place (where?)
     (%class="totemeditactions buttonwrapper"%)((([[$msg.get('totem.edit.exitedit')&gt;&gt;Totem.WebHome]])))
    )))
    (%class="#if("$!request.additem" != 'true')hidden#end addblockform"%)(((
      #set($fakeTotemBlock = $doc.newObject("TotemCode.TotemBlockClass"))    
      #displayTotemBlockEditForm($fakeTotemBlock, true, $cancelURL, $editURL)
    )))
  #end

  {{html clean="false"}}#template("textarea_wysiwyg.vm"){{/html}}
#else
  ## if we're in edit mode, send a redirect to the edit screen, since the totem has a special edit form (available in view).
  $response.sendRedirect("$editURL")
#end

{{html}}
#displayModal("totemModal")
{{/html}}

{{/velocity}}</content>
</xwikidoc>
